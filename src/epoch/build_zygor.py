import glob
import logging
import os
from pathlib import Path

logger = logging.getLogger("Epoch")
logging.basicConfig(level=logging.DEBUG)


"""
Zygor Guide Compiler
Compiles individual .zygor_guides files into a single Lua file for WoW addon
"""

# TODO : Refactor this
ALLIANCE_HEADER = """
local ZygorGuidesViewer = ZygorGuidesViewer
if not ZygorGuidesViewer then
	return
end
if UnitFactionGroup("player") ~= "Alliance" then
	return
end
"""

HORDE_HEADER = """
local ZygorGuidesViewer = ZygorGuidesViewer
if not ZygorGuidesViewer then
	return
end
if UnitFactionGroup("player") ~= "Horde" then
	return
end
"""

ALLIANCE_FOOTER = """
ZygorGuidesViewer.AllianceInstalled = true 
"""

HORDE_FOOTER = """
ZygorGuidesViewer.HordeInstalled = true 
"""


def compile_guides(
    input_dir: Path, output_file: Path, guide_name_mapping: dict[str, str], header: str, footer: str
):
    """
    Compile all .zygor_guide guide files in input_dir into a single Lua file.

    Args:
        input_dir: Directory containing .zygor_guide guide files
        output_file: Output .lua file path
        guide_name_mapping: Dict mapping filenames to guide names
    """
    guide_files = glob.glob(os.path.join(input_dir, "*.zygor_guide"))

    if not guide_files:
        logger.warning(f"No zygor guides at {input_dir}")
        return

    compiled_guides = []

    for guide_file in sorted(guide_files):
        filename = os.path.basename(guide_file).split(".")[0]

        # Check if we have a mapping for this file
        if filename not in guide_name_mapping:
            logger.warning(f"{filename} not present in mapping")
            continue

        logger.info(f"Loading {filename} guide")
        guide_name = guide_name_mapping[filename]

        try:
            with open(guide_file, encoding="utf-8") as file:
                content = file.read()

            escaped_content = content.replace("]]", "\\]\\]")

            registration_line = f'ZygorGuidesViewer:RegisterGuide("{guide_name}", [[\n{escaped_content}]])'

            compiled_guides.append(registration_line)

        except Exception:
            continue

    # Write the compiled file
    logger.info("Writing the compiled guide")
    try:
        with open(output_file, "w", encoding="utf-8") as file:
            file.write("-- AUTO-GENERATED FILE - DO NOT EDIT MANUALLY\n")
            file.write("-- Generated by Zygor Guide Compiler\n")
            file.write(f"{header}\n\n")

            for guide in compiled_guides:
                file.write(guide + "\n\n")

            file.write(f"{footer}\n")
    except Exception:
        # TODO : proper exception handling
        logger.error("Error happened while writing the compiled guide")
    logger.info("Compiled guide completed !")


def load_guide_name_mapping(mapping_file):
    """
    Load guide name mapping from a text file.
    Format: filename.zygor_guide = Custom Guide Name.
    """
    mapping = {}
    if not os.path.exists(mapping_file):
        logger.warning(f"Mapping file doesn't exist : {mapping_file}")
        return mapping

    try:
        with open(mapping_file, encoding="utf-8") as f:
            for line in f:
                line = line.strip()
                if line and "=" in line:
                    filename, guide_name = line.split("=", 1)
                    mapping[filename.strip()] = guide_name.strip()
    except Exception:
        # TODO : Proper error handling
        pass

    return mapping


ALLIANCE_MAPPING_FILE = "zygor_guides/alliance_mapping.txt"
ALLIANCE_INPUT_DIR = "zygor_guides/alliance/"
ALLIANCE_OUTPUT_FILE = "out/alliance_guide.lua"

HORDE_MAPPING_FILE = "zygor_guides/horde_mapping.txt"
HORDE_INPUT_DIR = "zygor_guides/horde/"
HORDE_OUTPUT_FILE = "out/horde_guide.lua"


def load(mapping_file, input_dir, output_file, header, footer):
    guide_mapping = load_guide_name_mapping(mapping_file)
    if not guide_mapping:
        logger.warning("Mapping doesn't exist or is empty")
        return

    # Compile guides
    logger.info("Starting to compile guides")
    compile_guides(input_dir, output_file, guide_mapping, header, footer)


if __name__ == "__main__":
    logger.info("Creating alliance guide")
    base_dir = Path(__file__).parent
    Path.mkdir(base_dir / Path(ALLIANCE_OUTPUT_FILE).parent, exist_ok=True)
    load(
        base_dir / ALLIANCE_MAPPING_FILE,
        base_dir / ALLIANCE_INPUT_DIR,
        base_dir / ALLIANCE_OUTPUT_FILE,
        ALLIANCE_HEADER,
        ALLIANCE_FOOTER,
    )
    logger.info("Creating horde guide")
    Path.mkdir(base_dir / Path(HORDE_OUTPUT_FILE).parent, exist_ok=True)

    load(
        base_dir / HORDE_MAPPING_FILE,
        base_dir / HORDE_INPUT_DIR,
        base_dir / HORDE_OUTPUT_FILE,
        HORDE_HEADER,
        HORDE_FOOTER,
    )
    logger.info("All guides completed, exiting")
